"""
Markdown Generation Module for Work Documentation System

This module handles the transformation of work log entries into readable documents.
It follows the Template Method pattern for flexible document generation.
"""

import markdown
from pathlib import Path
import tempfile
from typing import List, Optional, Protocol
from weasyprint import HTML, CSS
from abc import ABC, abstractmethod

from rich.console import Console

from .repository import Entry

console = Console()


class DocumentError(Exception):
    """Base exception for document generation errors"""
    pass


class FileWriteError(DocumentError):
    """Exception raised when writing files fails"""
    pass


class PDFGenerationError(DocumentError):
    """Exception raised when PDF generation fails"""
    pass


class DocumentTemplate(ABC):
    """Abstract base class for document templates"""

    @abstractmethod
    def generate_header(self) -> str:
        """Generate document header"""
        pass

    @abstractmethod
    def generate_section(self, entry: Entry) -> str:
        """Generate a section for an entry"""
        pass

    @abstractmethod
    def generate_footer(self) -> str:
        """Generate document footer"""
        pass


class DefaultTemplate(DocumentTemplate):
    """Default template implementation"""

    def generate_header(self) -> str:
        return "# Work Documentation\n\n"

    def generate_section(self, entry: Entry) -> str:
        formatted_time = entry.timestamp.strftime("%Y-%m-%d %H:%M:%S")
        if entry.type == "summary":
            return f"## Summary ({formatted_time})\n{entry.content}\n\n"
        return f"### History Entry ({formatted_time})\n{entry.content}\n\n"

    def generate_footer(self) -> str:
        return "\n---\nGenerated by WWJD (What Was James Doing?)\n"


DEFAULT_CSS = """
body {
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
    line-height: 1.6;
    max-width: 800px;
    margin: 0 auto;
    padding: 2em;
}
h1, h2, h3 { color: #333; }
code { background: #f4f4f4; padding: 0.2em 0.4em; border-radius: 3px; }
pre { background: #f8f8f8; padding: 1em; border-radius: 5px; overflow-x: auto; }
a { color: #0366d6; }
"""


class DocumentGenerator(ABC):
    """Base class for document generation"""

    def __init__(self, template: DocumentTemplate):
        self.template = template

    @abstractmethod
    def generate(self, entries: List[Entry], output_path: Path) -> None:
        """Generate document from entries"""
        pass


class MarkdownGenerator(DocumentGenerator):
    """Generates markdown documents"""

    def generate(self, entries: List[Entry], output_path: Path) -> None:
        """
        Generate a markdown file from entries

        Args:
            entries: List of Entry objects to include
            output_path: Path where to save the markdown file

        Raises:
            FileWriteError: If writing the file fails
        """
        try:
            with open(output_path, "w") as f:
                # Write header
                f.write(self.template.generate_header())

                # Write entries
                for entry in entries:
                    section = self.template.generate_section(entry)
                    f.write(section)

                # Write footer
                f.write(self.template.generate_footer())

        except IOError as e:
            raise FileWriteError(f"Failed to write markdown file: {str(e)}")


class PDFGenerator(DocumentGenerator):
    """Generates PDF documents from markdown"""

    def generate(self, entries: List[Entry], output_path: Path) -> None:
        """
        Generate a PDF file from entries via markdown

        Args:
            entries: List of Entry objects to include
            output_path: Path where to save the PDF file

        Raises:
            PDFGenerationError: If PDF generation fails
        """
        try:
            # First generate markdown
            with tempfile.NamedTemporaryFile(mode="w", suffix=".md") as md_file:
                # Write markdown content
                md_file.write(self.template.generate_header())
                for entry in entries:
                    section = self.template.generate_section(entry)
                    md_file.write(section)
                md_file.write(self.template.generate_footer())
                md_file.flush()

                # Convert markdown to HTML
                with open(md_file.name, "r") as f:
                    md_content = f.read()
                    html = markdown.markdown(
                        md_content, extensions=["extra", "codehilite"]
                    )

                # Create PDF from HTML
                html_doc = f"""
                <!DOCTYPE html>
                <html>
                <head>
                    <meta charset="UTF-8">
                    <style>{DEFAULT_CSS}</style>
                </head>
                <body>
                    {html}
                </body>
                </html>
                """

                HTML(string=html_doc).write_pdf(
                    output_path, stylesheets=[CSS(string=DEFAULT_CSS)]
                )

        except Exception as e:
            raise PDFGenerationError(f"Failed to generate PDF: {str(e)}")